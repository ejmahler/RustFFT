[package]

name = "rustfft"
version = "6.0.0"
authors = ["Allen Welkie <allen.welkie at gmail>", "Elliott Mahler <join.together at gmail>"]
edition = "2018"

description = "High-performance FFT library written in pure Rust."
documentation = "https://docs.rs/rustfft/"
repository = "https://github.com/ejmahler/RustFFT"
keywords = ["fft", "dft", "discrete", "fourier", "transform"]
categories = ["algorithms", "compression", "multimedia::encoding", "science"]
license = "MIT OR Apache-2.0"

[features]
default = ["avx", "sse"]

# On x86_64, the "avx" feature enables compilation of AVX-acclerated code. 
# Similarly, the "sse" feature enables SSE-accelerated code. 
# Enabling these improves performance if the client CPU supports AVX or SSE, while disabling them reduces compile time and binary size.
# If both are enabled, RustFFT will use AVX if the CPU supports it. If not, it will check for SSE4.1.
# If neither instruction set is available, it will fall back to the scalar code.  
# On every other platform, these features do nothing, and RustFFT will behave like they are not set.
avx = []
sse = []


[dependencies]
num-complex = "0.4"
num-traits = "0.2"
num-integer = "^0.1.40"
strength_reduce = "^0.2.1"
transpose = "0.2"
primal-check = "0.3.1"

[dev-dependencies]
rand = "0.8"
paste = "1.0.4"
